<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".html" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Serialization" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ include file="..\..\abscommon\CommonInclude\Common\CommonCodeblocks.ttinclude" #>
<#@ include file="UserInterface_v1_0.ttinclude" #>
<#   
	// Set abstraction specific type and single file specific extension
	TransformGenerator< UserInterfaceAbstractionType >(GenerateRoot, ".designer.html");	
	//GenerateRoot();
#>
<#+ 
/*
	public Tuple<string, string>[] GetGeneratorContent(params string[] xmlFileNames)
	{
		List<Tuple<string, string>> result = new List<Tuple<string, string>>();
		foreach(string xmlFileName in xmlFileNames)
		{
			ClassModelAbstractionType abs = LoadXml<ClassModelAbstractionType>(xmlFileName);
			CurrentAbstraction = abs;
			string content = TransformText();
			string outputFile = Path.GetFileNameWithoutExtension(xmlFileName) + ".designer.js";
			result.Add(Tuple.Create(outputFile, content));
		}
		return result.ToArray();
	}
*/	
	void SetCurrentAbstraction(object abs)
	{
		CurrentAbstraction = ( UserInterfaceAbstractionType ) abs;
	}
	
	UserInterfaceAbstractionType CurrentAbstraction;
	
	void GenerateRoot()
	{
		GenerateAbstraction(CurrentAbstraction);
	}
	
	void GenerateAbstraction(UserInterfaceAbstractionType abstraction)
	{
		return;
		PropertyType propType = (PropertyType) abstraction.UserInterfaces[0].SemanticModel[0].Properties[0];
		GenerateProperty(propType);
	}
	
	void GenerateProperty(PropertyType prop)
	{
		string label = prop.LabelText;
		StringType strItem = (StringType) prop.Item;
		string className = "str" + strItem.minLength + "-" + strItem.maxLength; 
		string strContent = prop.name;
		#>
		<div class="label"><#= label #></div><div class="<#= className #>">
		<input><#= strContent #></input></div>
		<#+
	}
	
#>